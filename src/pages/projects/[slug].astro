---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { t, getSupportedLocale } from '../../utils/i18n';
import Nav from '../../components/Nav.astro';
import { getRelativeLocaleUrl } from 'astro:i18n';

export async function getStaticPaths() {
	const allProjects = await getCollection('projects');

	// Generate paths for both languages
	const paths: any[] = [];

	// Group projects by slug (removing language suffix)
	const projectsBySlug = new Map();
	allProjects.forEach((project: any) => {
		const baseSlug = project.slug.replace(/\.(en|es)$/, '');
		if (!projectsBySlug.has(baseSlug)) {
			projectsBySlug.set(baseSlug, []);
		}
		projectsBySlug.get(baseSlug).push(project);
	});

	// Create paths for each language
	projectsBySlug.forEach((projects: any[], baseSlug: string) => {
		projects.forEach((project: any) => {
			paths.push({
				params: { slug: baseSlug },
				props: {
					projects: projects, // Pass all language versions
					currentProject: project,
					baseSlug,
				},
			});
		});
	});

	return paths;
}

const { projects, baseSlug } = Astro.props;
const currentLang = getSupportedLocale(Astro.currentLocale);

// Find the project in the current language
const project =
	projects.find((p: any) => p.data.lang === currentLang) || projects[0];
const { Content } = await project.render();
---

<Layout
	title={`${project.data.title} | DevSandoval`}
	description={project.data.description}
	lang={currentLang}>
	<Nav />

	<main class='container mx-auto px-4 py-8'>
		<nav class='mb-8'>
			<a
				href={getRelativeLocaleUrl(currentLang, '/projects')}
				class='text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200'>
				‚Üê {t(currentLang, 'backToProjects')}
			</a>
		</nav>

		<article class='max-w-4xl mx-auto'>
			<header class='mb-8'>
				<h1 class='text-4xl font-bold mb-4'>{project.data.title}</h1>
				<p class='text-xl text-gray-600 dark:text-gray-300 mb-6'>
					{project.data.description}
				</p>

				{
					project.data.tech && (
						<div class='mb-6'>
							<div class='flex flex-wrap gap-2'>
								{project.data.tech.map((tech: string) => (
									<span class='bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-3 py-1 rounded-full text-sm'>
										{tech}
									</span>
								))}
							</div>
						</div>
					)
				}

				<div class='flex gap-4 mb-8'>
					{
						project.data.github && (
							<a
								href={project.data.github}
								target='_blank'
								rel='noopener noreferrer'
								class='bg-gray-800 text-white px-6 py-2 rounded-lg hover:bg-gray-700 transition-colors'>
								{t(currentLang, 'viewCode')}
							</a>
						)
					}
					{
						project.data.live && (
							<a
								href={project.data.live}
								target='_blank'
								rel='noopener noreferrer'
								class='bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors'>
								{t(currentLang, 'liveDemo')}
							</a>
						)
					}
				</div>
			</header>

			<div class='prose dark:prose-invert max-w-none'>
				<Content />
			</div>
		</article>
	</main>
</Layout>
